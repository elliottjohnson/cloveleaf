# Cloveleaf

A library for presenting SMuFL compliant font information in Common Lisp.

Currently it supports only Truetype fonts with provided JSON metadata files.
Until there is native OTF font support in Common Lisp, this requires taking
an OTF font file and converting it to a TTF file.  I have been using
FontForge to generate TTF fonts from OTF files.  The OTF format builds upon
TTF and this process strips the metadata out of the OTF file.

This library reconstructs font metadata from the SMuFL compliant JSON file
that each SMuFL font releases for compatability with non-OTF fonts such as
TTF.

It is the goal of this project to provide future support for OTF, SVG, WOFF,
and other font formats.  Some of these will be easier than others due to
library offerings.

The intended application of this library is to construct scoring applications
and other musical font representation in Common Lisp applications using an
industry standard.

## Background

Cloveleaf pulls in SMuFL specification definitions, see files:

  * src/glyphnames.lisp
  * src/classes.lisp
  * src/ranges.json

The above files are autogenerated from the JSON source files of the SMuFL
project repository at: https://github.com/w3c/smufl.git  This projects files
and their data fall under the W3C Community Final Specification Agreement
(FSA).

The data in the above files is converted by the :cloveleaf/smufl package.
See the below file for the following command:

  * build/generate.lisp

  `(cloveleaf/smufl:generate-smufl-metadata-files) ; see additional keys and parameters`

The current generated lisp files commited to this repository make use of
SMuFL release v1.4 (March 19th, 2021).

## License

The cloveleaf library is released under the following MIT license:

`Copyright (c) 2025 Elliott Johnson

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.`

The SMuFL specification is released under the W3C Community Final Specification
Agreement (FSA) and this software indirectly contains sections derived from the
specification.

## Installation

To install the library, my recommendation is to use it as a `quicklisp` local
application.  Download and link the cloveleaf.asd file to the quicklisp
`local-projects` directory and then execute the following code:

```(ql:quickload 'cloveleaf/ttf)```

This will pull in all of the requirements and load the library with the TTF
backend.

## Startup

To load a font, you first need a SMuFL compilant font that either has a TTF
font file or a TTF file generated from other sources as well as a SMuFL
compilant JSON metadata file.

The font can be instantiated by the following command:

```(in-package :cloveleaf)
(defvar *font* (make-instance 'cloveleaf/ttf:ttf-font
                              :pathname #p"/path/to/font.ttf"
			      :metadata #p"/path/to/font_metadata.json"))
```

Now that the font object exists, it can be loaded:

```(load-font *font*)```

Currently this outputs a lot of warnings as the loading process makes some early
assumptions and later overwrites them with a warning.

Testing was done with Bravura, which is the SMuFL standard font.  Trying to load
other fonts may or maynot work out of the box.  Please submit any bug reports
as each font has different levels of conformity to the standard.

## Usage

From this point on the font glyphs can be retrieved using two hash tables.

```(font-glyph-hash *font*)```

will return a hash-table that is keyed on unicode characters to make it easy to
reference a score as unicode character stream.  This interface may change in the
future as this library gets put to use.

```(font-name-hash *font*)```

will return a hash-table that is keyed on a string descriptor of the glyph.
This is used as a cross reference during setup of glyphs, alternate glyphs,
sets, ranges, and other SMuFL structures that use glyph names as a key.

There is a convience function to fetch glyphs via the many different references:

```(get-glyph font descriptor)```

where FONT is a font object and DESCRIPTOR is one of the following types:

  * GLYPH: a glyph object
  * STRING: a string representing the glyph-name
  * CHARACTER: a character representing the glyph.
  * INTEGER: a code character representing the unicode character for a glyph.
  * LIST: a list of any of the above to be converted to a list of glyphs.
  * ARRAY: an array of any of the above to be converted to a list of glyphs.

Fonts can be reset to a default state using the function `(CLEAR-FONT FONT)`

## Classes

### Fonts

```FONT``` class is the parent of all cloveleaf fonts.  There are some sub-
classes such as `TEXT-FONT`, which is used to display musical notation in
a textual document rather than a musical score.

```METADATA-FONT``` is a sub-class of `FONT` that is for font files that do
not have built in metadata.  They require a :METADATA key to point them to
the metadata file for that particular font.

#### Font backends

```TTF-FONT``` is the backend that uses ZPB-TTF to load truetype fonts.  As
noted above, my testing has been with OTF fonts converted to TTF using
FontForge.  The JSON metadata file makes up for the lack of in-font
metadata.

### Glyphs

```GLYPH``` class is the parent of all glyphs and contains all of the metadata
about the particular glyph, including the unicode, font glyphs, registration,
alternates, etc.

```LIGATURE-GLYPHS``` are a class of glyphs made up a list of COMPONENT-GLYPHS.
```TTF-GLYPH``` is a class of glyphs that include the source TTF-GLYPH with
associated contours, bounding box, and index.

## Future

There is some real low hanging fruit.

### Testing

Currently there are no tests in the framework, but it is on the horizon to
add some ROVE tests to get good coverage.

### McCLIM

McCLIM has a TTF backend.  I'd like to make a cloveleaf backend to allow
these definitions to be accessable to McCLIM applications.

### More backends

SVG should be fairly easy to add.  OTF directly is kind of the holy grail,
but I believe it will take extending ZPB-TTF to cover the additional OTF
specification.
